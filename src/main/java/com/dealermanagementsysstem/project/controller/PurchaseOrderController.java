package com.dealermanagementsysstem.project.controller;

import com.dealermanagementsysstem.project.Model.DAOPurchaseOrder;
import com.dealermanagementsysstem.project.Model.DAOPurchaseOrderDetail;
import com.dealermanagementsysstem.project.Model.DTOPurchaseOrder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.sql.Timestamp;
import java.util.List;

@Controller
@RequestMapping("/orderdealer")
public class PurchaseOrderController {

    @Autowired
    private DAOPurchaseOrder daoPurchaseOrder;

    @Autowired
    private DAOPurchaseOrderDetail daoPurchaseOrderDetail;

    /**
     * üîπ Trang danh s√°ch ƒë∆°n h√†ng
     */
    /**
     * üîπ Trang danh s√°ch ƒë∆°n h√†ng (ch·ªâ hi·ªÉn th·ªã ƒë∆°n c·ªßa Dealer ƒëang ƒëƒÉng nh·∫≠p)
     */
    @GetMapping("")
    public String showOrderList(Model model) {
        try {
            // L·∫•y email c·ªßa ng∆∞·ªùi ƒëƒÉng nh·∫≠p (Spring Security)
            org.springframework.security.core.Authentication auth = SecurityContextHolder.getContext().getAuthentication();
            org.springframework.security.core.userdetails.User user =
                    (org.springframework.security.core.userdetails.User) auth.getPrincipal();
            String email = user.getUsername();

            // L·∫•y DealerID d·ª±a theo email ƒëƒÉng nh·∫≠p
            int dealerId = daoPurchaseOrder.getDealerIdByEmail(email);

            if (dealerId <= 0) {
                model.addAttribute("message", "‚ùå Kh√¥ng t√¨m th·∫•y Dealer t∆∞∆°ng ·ª©ng v·ªõi t√†i kho·∫£n ƒëƒÉng nh·∫≠p (" + email + ")");
                model.addAttribute("orders", List.of());
                return "dealerPage/orderStatusList";
            }

            // L·∫•y danh s√°ch ƒë∆°n h√†ng theo DealerID
            List<DTOPurchaseOrder> orders = daoPurchaseOrder.getPurchaseOrdersByDealerId(dealerId);

            model.addAttribute("orders", orders);
        } catch (Exception e) {
            e.printStackTrace();
            model.addAttribute("message", "‚ö†Ô∏è L·ªói khi t·∫£i danh s√°ch ƒë∆°n h√†ng: " + e.getMessage());
        }

        return "dealerPage/orderStatusList";
    }


    /**
     * üîπ Khi ch·ªçn xe ‚Üí m·ªü form nh·∫≠p chi ti·∫øt ƒë∆°n h√†ng
     */
    @GetMapping("/create")
    public String showCreateForm(
            @RequestParam(required = false) Integer modelId,
            @RequestParam(required = false) Integer colorId,
            @RequestParam(required = false) String modelName,
            Model model) {

        model.addAttribute("modelId", modelId);
        model.addAttribute("colorId", colorId);
        model.addAttribute("modelName", modelName);
        model.addAttribute("order", new DTOPurchaseOrder());
        return "dealerPage/createDealerOrderForm"; // form nh·∫≠p s·ªë l∆∞·ª£ng + version
    }

    /**
     * üîπ X·ª≠ l√Ω form t·∫°o ƒë∆°n h√†ng
     */
    @PostMapping("/create")
    public String createOrder(
            @RequestParam Integer modelId,
            @RequestParam Integer colorId,
            @RequestParam Integer quantity,
            @RequestParam String version,
            @RequestParam(required = false) String status,
            Model model) {

        try {
            // L·∫•y email ng∆∞·ªùi ƒëang ƒëƒÉng nh·∫≠p (Spring Security)
            org.springframework.security.core.Authentication auth = SecurityContextHolder.getContext().getAuthentication();
            org.springframework.security.core.userdetails.User user =
                    (org.springframework.security.core.userdetails.User) auth.getPrincipal();
            String email = user.getUsername();

            // L·∫•y DealerID & StaffID d·ª±a theo email ƒëƒÉng nh·∫≠p
            int dealerId = daoPurchaseOrder.getDealerIdByEmail(email);
            int staffId = daoPurchaseOrder.getStaffIdByEmail(email);

            if (dealerId <= 0 || staffId <= 0) {
                model.addAttribute("message", "‚ùå Kh√¥ng t√¨m th·∫•y Dealer ho·∫∑c Staff t∆∞∆°ng ·ª©ng v·ªõi t√†i kho·∫£n ƒëƒÉng nh·∫≠p (" + email + ")");
                return "dealerPage/success";
            }

            //T·∫°o ƒë∆°n h√†ng m·ªõi
            DTOPurchaseOrder order = new DTOPurchaseOrder();
            order.setDealerId(dealerId);
            order.setStaffId(staffId);
            order.setStatus(status != null ? status : "Pending");
            order.setCreatedAt(new Timestamp(System.currentTimeMillis()));

            // ‚úÖ Ghi v√†o DB
            int newOrderId = daoPurchaseOrder.insertPurchaseOrder(order);

            if (newOrderId > 0) {
                boolean added = daoPurchaseOrderDetail.insertOrderDetail(
                        newOrderId, modelId, colorId, quantity, version
                );
                model.addAttribute("message", added
                        ? " ƒê·∫∑t xe th√†nh c√¥ng!"
                        : "‚ö†ƒê∆°n ƒë√£ t·∫°o nh∆∞ng ch∆∞a ghi chi ti·∫øt!");
            } else {
                model.addAttribute("message", " Kh√¥ng th·ªÉ t·∫°o ƒë∆°n h√†ng!");
            }

        } catch (Exception e) {
            e.printStackTrace();
            model.addAttribute("message", " L·ªói h·ªá th·ªëng: " + e.getMessage());
        }

        return "dealerPage/success";
    }

    /**
     * üîπ Trang success (ch·ªâ khi load tr·ª±c ti·∫øp)
     */
    @GetMapping("/success")
    public String showSuccessPage(Model model) {
        if (!model.containsAttribute("message")) {
            model.addAttribute("message", " Order processed!");
        }
        return "dealerPage/success";
    }

    /**
     * üîπ API: L·∫•y danh s√°ch ƒë∆°n h√†ng (JSON)
     */
    @ResponseBody
    @GetMapping("/api")
    public List<DTOPurchaseOrder> getAllOrders() {
        return daoPurchaseOrder.getAllPurchaseOrders();
    }

    /**
     * üîπ API: L·∫•y ƒë∆°n h√†ng theo ID (JSON)
     */
    @ResponseBody
    @GetMapping("/api/{id}")
    public DTOPurchaseOrder getOrderById(@PathVariable int id) {
        return daoPurchaseOrder.getPurchaseOrderById(id);
    }

    /**
     * üîπ API: C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
     */
    @ResponseBody
    @PutMapping("/api/{id}/status")
    public String updateStatus(@PathVariable int id, @RequestParam String status) {
        boolean updated = daoPurchaseOrder.updatePurchaseOrderStatus(id, status);
        return updated ? "Updated successfully" : "Update failed";
    }

    /**
     * üîπ API: X√≥a ƒë∆°n h√†ng
     */
    @ResponseBody
    @DeleteMapping("/api/{id}")
    public String deleteOrder(@PathVariable int id) {
        int result = daoPurchaseOrder.deletePurchaseOrder(id);
        return result > 0 ? "Deleted successfully" : "Delete failed";
    }
}
