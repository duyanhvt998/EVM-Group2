package com.dealermanagementsysstem.project.controller;

import com.dealermanagementsysstem.project.Model.DAOCustomer;
import com.dealermanagementsysstem.project.Model.DTOCustomer;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.util.List;

@Controller
public class CustomerController {

    @Autowired
    private DAOCustomer daoCustomer;

    // ‚úÖ Khi ng∆∞·ªùi d√πng v√†o /customer ‚Üí t·ª± ƒë·ªông chuy·ªÉn h∆∞·ªõng t·ªõi /customer/list
    @GetMapping({"/customer", "/customer/"})
    public String redirectCustomerToList() {
        return "redirect:/customer/list";
    }

    // ‚úÖ Hi·ªÉn th·ªã danh s√°ch kh√°ch h√†ng (Better List)
    @GetMapping("/customer/list")
    public String listCustomers(Model model) {
        List<DTOCustomer> customerList = daoCustomer.getAllCustomers();
        model.addAttribute("customers", customerList);
        return "dealerPage/customerList";
                // ‚úÖ Giao di·ªán ch√≠nh
    }

    // ‚úÖ Form t·∫°o m·ªõi Customer
    @GetMapping("/customer/create")
    public String showCreateForm(Model model) {
        model.addAttribute("customer", new DTOCustomer());
        return "dealerPage/customerCreate";
    }

    // ‚úÖ L∆∞u customer m·ªõi
    @PostMapping("/customer/save")
    public String saveCustomer(@ModelAttribute("customer") DTOCustomer c,
                               RedirectAttributes redirectAttributes) {
        boolean success = daoCustomer.insertCustomer(c);

        if (success) {
            redirectAttributes.addFlashAttribute("successMessage", "‚úÖ Customer added successfully!");
        } else {
            redirectAttributes.addFlashAttribute("errorMessage", "‚ùå Failed to add customer!");
        }

        return "redirect:/customer/list"; // ‚úÖ Quay l·∫°i danh s√°ch
    }

    // ‚úÖ M·ªü trang ch·ªânh s·ª≠a Customer
    @GetMapping("/customer/edit/{id}")
    public String editCustomer(@PathVariable("id") int id, Model model, RedirectAttributes redirectAttributes) {
        DTOCustomer customer = daoCustomer.getCustomerById(id);
        if (customer == null) {
            redirectAttributes.addFlashAttribute("errorMessage", "‚ùå Customer not found!");
            return "redirect:/customer/list";
        }
        model.addAttribute("customer", customer);
        return "dealerPage/customerEdit";
    }

    // ‚úÖ C·∫≠p nh·∫≠t Customer
    @PostMapping("/customer/update")
    public String updateCustomer(@ModelAttribute("customer") DTOCustomer c,
                                 RedirectAttributes redirectAttributes) {
        boolean success = daoCustomer.updateCustomer(c);

        if (success) {
            redirectAttributes.addFlashAttribute("successMessage", "‚úÖ Customer updated successfully!");
        } else {
            redirectAttributes.addFlashAttribute("errorMessage", "‚ùå Failed to update customer!");
        }

        return "redirect:/customer/list"; // ‚úÖ Tr·ªü v·ªÅ danh s√°ch
    }

    // ‚úÖ X√≥a Customer (POST chu·∫©n RESTful)
    @PostMapping("/customer/delete/{id}")
    public String deleteCustomer(@PathVariable("id") int id,
                                 RedirectAttributes redirectAttributes) {
        boolean success = daoCustomer.deleteCustomer(id);

        if (success) {
            redirectAttributes.addFlashAttribute("successMessage", "üóëÔ∏è Customer deleted successfully!");
        } else {
            redirectAttributes.addFlashAttribute("errorMessage", "‚ùå Failed to delete customer!");
        }

        return "redirect:/customer/list"; // ‚úÖ Quay v·ªÅ danh s√°ch
    }


    // ‚úÖ T√¨m ki·∫øm Customer
    @GetMapping("/customer/search")
    public String searchCustomer(@RequestParam("keyword") String keyword, Model model) {
        List<DTOCustomer> customerList = daoCustomer.searchCustomer(keyword);
        model.addAttribute("customers", customerList);
        model.addAttribute("keyword", keyword);
        return "dealerPage/betterCustomerList";
    }
    // ‚úÖ Hi·ªÉn th·ªã chi ti·∫øt kh√°ch h√†ng
    @GetMapping("/customer/detail/{id}")
    public String showCustomerDetail(@PathVariable("id") int id, Model model, RedirectAttributes redirectAttributes) {
        DTOCustomer customer = daoCustomer.getCustomerById(id);
        if (customer == null) {
            redirectAttributes.addFlashAttribute("errorMessage", "‚ùå Customer not found!");
            return "redirect:/customer/list";
        }

        model.addAttribute("customer", customer);
        return "dealerPage/customerDetail"; // ‚úÖ ƒê√¢y l√† file HTML b·∫°n v·ª´a g·ª≠i
    }

}
